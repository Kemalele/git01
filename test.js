const tests = []
const t = (f) => tests.push(f)
const eq = (a, b) => {
    if (a === b) {
        return true
    } else {
        return false
    }
}

const eqArr = (a,b) => {
    if (a.length != b.length) {
        return false
    }
    for (let i = 0; i < a.length;i++) {
        if (a[i] != b[i]) {
            return false
        }
    }

    return true
}

const $5 = `
    a
   aaa
  aaaaa
 aaaaaaa
aaaaaaaaa
`

const $10 = `
         +
        +++
       +++++
      +++++++
     +++++++++
    +++++++++++
   +++++++++++++
  +++++++++++++++
 +++++++++++++++++
+++++++++++++++++++
`

const $7 = `
                  ABC
               ABCABCABC
            ABCABCABCABCABC
         ABCABCABCABCABCABCABC
      ABCABCABCABCABCABCABCABCABC
   ABCABCABCABCABCABCABCABCABCABCABC
ABCABCABCABCABCABCABCABCABCABCABCABCABC
`

const $12 = `
                      {}
                    {}{}{}
                  {}{}{}{}{}
                {}{}{}{}{}{}{}
              {}{}{}{}{}{}{}{}{}
            {}{}{}{}{}{}{}{}{}{}{}
          {}{}{}{}{}{}{}{}{}{}{}{}{}
        {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
      {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
    {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
  {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
`

const $13 = `
                                    <^>
                                 <^><^><^>
                              <^><^><^><^><^>
                           <^><^><^><^><^><^><^>
                        <^><^><^><^><^><^><^><^><^>
                     <^><^><^><^><^><^><^><^><^><^><^>
                  <^><^><^><^><^><^><^><^><^><^><^><^><^>
               <^><^><^><^><^><^><^><^><^><^><^><^><^><^><^>
            <^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^>
         <^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^>
      <^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^>
   <^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^>
<^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^><^>
`

const $40 = `
                                       #
                                      ###
                                     #####
                                    #######
                                   #########
                                  ###########
                                 #############
                                ###############
                               #################
                              ###################
                             #####################
                            #######################
                           #########################
                          ###########################
                         #############################
                        ###############################
                       #################################
                      ###################################
                     #####################################
                    #######################################
                   #########################################
                  ###########################################
                 #############################################
                ###############################################
               #################################################
              ###################################################
             #####################################################
            #######################################################
           #########################################################
          ###########################################################
         #############################################################
        ###############################################################
       #################################################################
      ###################################################################
     #####################################################################
    #######################################################################
   #########################################################################
  ###########################################################################
 #############################################################################
###############################################################################
`

const pyramid = (char, num) => {
    let res = ''
    let count = 1
    for (let i = 0; i < num; i++ ) {
        let row = ''
        for (let j = 0; j < num - i - 1; j++) {
            row += ' '.repeat(char.length)
        }
        row += char.repeat(count)
        count += 2

        if (i != num -1) {
            row += '\n'
        }
        res += row
    }

    return res
}


// t(({ eq }) => eq(pyramid('a', 5), $5.slice(1, -1)))
// t(({ eq }) => eq(pyramid('+', 10), $10.slice(1, -1)))
// t(({ eq }) => eq(pyramid('#', 40), $40.slice(1, -1)))

console.log(pyramid('{}', 12))
t(({ eq }) => eq(pyramid('{}', 12), $12.slice(1, -1)))
t(({ eq }) => eq(pyramid('ABC', 7), $7.slice(1, -1)))
t(({ eq }) => eq(pyramid('<^>', 13), $13.slice(1, -1)))

Object.freeze(tests)

for (let i = 0; i < tests.length; i++) {
    if (!tests[i]({ eq })) {
        console.log(tests[i]({ eq }))
    } else {
        console.log('ok')
    }
}